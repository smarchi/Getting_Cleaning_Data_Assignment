help(plot)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(5,11)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
play()
nxt()
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I", "want", "chocolate")
submit()
mad_libs(place = "Santiago", adjective = "beautiful", noun = "car")
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
play()
class(Sys.time())
class(t1)
nxt()
Sys.time() - t1
difftime(Sys.time(), t1, unit = 'days')
x <- 1:10
x>5
3+3+4
?rnorm
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
play()
unique_vals[2]
nxt()
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
dim(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?abs
abs(5-2)
abs(5-7)
?mtcars
tapply(mtcars$hp,mtcars$cyl,mean)
d <- tapply(mtcars$hp,mtcars$cyl,mean)
abs(d$4-d$8)
d$4
d <- tapply(mtcars$hp,mtcars$cyl,abs)
d
d <- tapply(mtcars$hp,mtcars$cyl,mean)
d
?d
??d
209.21429-82.63636
debug(ls)
ls
?with
debug(ls)
ls
?debug
debug(ls)
ls
ls
ls
ls
debug(ls)
ls()
ls()
ls
ls()
exit
q
w
w
q
q
q
q
install.packages("RMySQL")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "455c6355e0461ca28b5a",
secret = "4a111a5fd8bb0f18faa21609a126d1507ac20905")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
stop_for_status(req)
content(req)
library(datasets)
mtcars
?melt
library(plyr)
?melt
library(reshape2)
?melt
mtcars$carnames <- rownames(mtcars)
mtcars
cars_melt <- melt(mtcars, id.vars = c("carnames","cyl"), measure.vars = c("mpg", "hp"))
cars_melt
dcast(cars_melt, cyl ~ variable)
dcast(cars_melt, cyl ~ variable, mean)
tapply(cars_melt,cars_melt$variable)
tapply(cars_melt$variables, cars_melt$cyl, mean)
tapply(cars_melt$variable, cars_melt$cyl, mean)
mtcars
?tapply
tapply(mtcars$gear, mtcars$cyl, mean)
tapply(mtcars$gear, mtcars$cyl, .n)
tapply(mtcars$gear, mtcars$cyl, .N)
library(dplyr)
mtcars_g <- group_by(mtcars,cyl)
mtcars_g
mutate(mtcars_g,mean_carb = mean(carb))
select(mtcars_g,cyl,mean_carb)
select(mtcars_g,cyl,mean_carb)
?select
mtcars$mean_carb
mtcars_g$mean_carb
mtcars_g <- mutate(mtcars_g,mean_carb = mean(carb))
select(mtcars_g,cyl,mean_carb)
?match_df
?mutate
?ddply
library(dplyr)
?mutate
?ddply
?tapply
?ddply
?lapply
?apply
?vapply
mtcars
ddply(mtcars,"cyl",summarise,mean(mpg))
ddply(mtcars,"cyl",summarise,mean_mpg=mean(mpg))
ddply(mtcars,"cyl",transform,mean_mpg=mean(mpg))
mtcars %>% group_by(cyl) %>% mutate(mean_mpg = mean(mpg))
t <-mtcars %>% group_by(cyl) %>% mutate(mean_mpg = mean(mpg))
t$mean_mpg
t <-mtcars %>% group_by(cyl) %>% mutate(mean_mpg = mean(mpg)) %>% sort(cyl)
t <-mtcars %>% group_by(cyl) %>% mutate(mean_mpg = mean(mpg)) %>% arrange(cyl)
t
select(cyl,mean_mpg)
select(t,cyl,mean_mpg)
tail(select(t,cyl,mean_mpg))
getwd()
setwd("Code/Coursera/course3")
getwd()
source("run_analysis.R")
?gsub
source("run_analysis.R")
source("run_analysis.R")
grouped_means
grouped_means
source("run_analysis.R")
grouped_means
select(grouped_means, fBodyGyroMag_std())
source("run_analysis.R")
grouped_means
select(grouped_means, fBodyGyroMag_std)
source("run_analysis.R")
source("run_analysis.R")
grouped_means
source("run_analysis.R")
grouped_means
source("run_analysis.R")
grouped_means
