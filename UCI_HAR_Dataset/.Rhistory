submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()รง
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
setwd("./Downloads/")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "q1.csv", method = "curl")
q1_data = read.csv("q1.csv")
agricultureLogical <- q1_data$ACR == 3 & q1_data$AGS == 6
agricultureLogical
which(agricultureLogical)
which(agricultureLogical)[1:3]
?jpeg
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile = "q2.jpg",method="curl")
q2_data <- jpeg("q2.jpg",native=TRUE)
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
??jpeg
q2_data <- readJPEG("q2.jpg",native=TRUE)
q2_data
?quantiles
?quantile
quantile(q2_data,probs = c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile = "GDP.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "edu.csv", method = "curl")
GDP <- read.csv("GDP.csv")
edu <- read.csv("edu.csv")
GDP
str(GDP)
GDP
tail(GDP)
?match
edu
str(edu)
edu$CountryCode
edu$CountryCode %in% GDP$X
?n
GDP
GDP
GDP$Gross.domestic.product.2012
GDP <- read.csv("GDP.csv",skip = 4, nrows = 190)
GDP
GDP <- read.csv("GDP.csv",nrows = 190)
GDP
GDP <- read.csv("GDP.csv",skip = 4, nrows = 190, header = TRUE)
GDP
GDP <- read.csv("GDP.csv",skip = 2:5, nrows = 190)
edu
edu$CountryCode
GDP <- read.csv("GDP.csv",nrows = 194)
GDP
GDP <- read.csv("GDP.csv",nrows = 190)
GDP
GDP[5:]
GDP[5:194]
GDP[5:190]
GDP[,5:]
GDP[5:,]
GDP[5:194,]
GDP[194,]
GDP[193,]
GDP[192,]
GDP[191,]
GDP[190,]
GDP[1,]
GDP[2,]
GDP[3,]
GDP[4,]
GDP[5,]
GDP[5,190]
GDP[5:190,]
GDP <- GDP[5:190,]
GDP
library(dplyr)
GDP <- tbl_df(GDP)
GDP
edu <- tbl_df(edu)
edu
?bind_rows
merge(GDP,edu,by.x="X",by.y="CountryCode")
?merge
merge(GDP,edu,by.x="X",by.y="CountryCode",all=FALSE)
names(merge(GDP,edu,by.x="X",by.y="CountryCode",all=FALSE))
merge(GDP,edu,by.x="X",by.y="CountryCode",all=FALSE)
merge(edu,GDP,by.y="X",by.x="CountryCode",all=FALSE)
names(merge(edu,GDP,by.y="X",by.x="CountryCode",all=FALSE))
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode",all=FALSE)
merged$CountryCode
length(merged$CountryCode)
GDP <- read.csv("GDP.csv")
GDP <- tbl_df(GDP)
GDP
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode",all=FALSE)
length(merged$CountryCode)
merged$CountryCode
edu
edu$CountryCode
GDP$X.1
GDP$X
merged$CountryCode
GDP <- read.csv("GDP.csv",stringsAsFactors = FALSE)
GDP <- tbl_df(GDP)
edu <- read.csv("edu.csv",stringsAsFactors = FALSE)
edu <- tbl_df(edu)
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode",all=FALSE)
merged$CountryCode
len(merged$CountryCode)
length(merged$CountryCode)
GDP
GDP[190,]
GDP[194,]
GDP[195,]
GDP[198,]
GDP$X
GDP[220,]
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode",all=TRUE)
merged$CountryCode
340-102
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode")
merged$CountryCode
length(merged$CountryCode)
edu$CountryCode %in% GDP$X
which(edu$CountryCode %in% GDP$X)
length(which(edu$CountryCode %in% GDP$X))
length(which(GDP$X %in% edu$CountryCode))
sort(GDP$X)
edu$CountryCode
sort(GDP$X[102:330])
sort(GDP$X[102:330,])
sort(GDP$X[102:330])
sort(GDP$X)[102:330]
sort(GDP$X)[103:330]
GDP
merged
arrange(merged,Gross.domestic.product.2012)
merged
merged <- tbl_df(merged)
merged
names(merged)
arrange(merged,desc(Gross.domestic.product.2012))
arrange(merged,desc(Gross.domestic.product.2012))[13,]
merged_sorted <- arrange(merged,desc(Gross.domestic.product.2012))
merged_sorted
merged_sorted$Gross.domestic.product.2012
GDP$Gross.domestic.product.2012
merged_sorted <- arrange(merged,desc(as.numeric(Gross.domestic.product.2012)))
merged_sorted$Gross.domestic.product.2012
merged_sorted[13,]
merged$CountryCode[~is.na(merged$Gross.domestic.product.2012),]
merged$Gross.domestic.product.2012
merged$CountryCode[~which(merged$Gross.domestic.product.2012==""),]
which(merged$Gross.domestic.product.2012=="")
merged$CountryCode[~(merged$Gross.domestic.product.2012==""),]
merged$Gross.domestic.product.2012==""
merged$Gross.domestic.product.2012!=""
merged$CountryCode[merged$Gross.domestic.product.2012!="",]
merged$[merged$Gross.domestic.product.2012!="",]
merged[merged$Gross.domestic.product.2012!="",]
merged <- merged[merged$Gross.domestic.product.2012!="",]
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode")
merged <- tbl_df(merged)
merged
merged <- filter(merged,Gross.domestic.product.2012!="")
merged
merged_sorted <- arrange(merged,desc(as.numeric(Gross.domestic.product.2012))
)
merged_sorted
merged_sorted[13,]
names(merged)
GDP
merged$Income.Group
merged_grouped <- group_by(merged,High income OECD, High income nonOECD)
merged_grouped <- group_by(merged,High income: OECD, High income: nonOECD)
merged_grouped <- group_by(merged,Income.Group)
?summarize
filter(merged_grouped,Gross.domestic.product.2012!="")
summarize(filter(merged_grouped,Gross.domestic.product.2012!=""),mean(Gross.domestic.product.2012))
summarize(filter(merged_grouped,Gross.domestic.product.2012!=""),mean(as.numeric(Gross.domestic.product.2012)))
merged
merged$Gross.domestic.product.2012 <- as.numeric(merged$Gross.domestic.product.2012)
merged$Gross.domestic.product.2012
merged <- merge(edu,GDP,by.y="X",by.x="CountryCode")
merged <- tbl_df(merged)
merged$Gross.domestic.product.2012 <- as.numeric(merged$Gross.domestic.product.2012)
merged$Gross.domestic.product.2012
merged
?group_by
?quantile
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.2))
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.2),na.rm=TRUE)
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.25),na.rm=TRUE)
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.22),na.rm=TRUE)
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.2),na.rm=TRUE)
quantile(merged$Gross.domestic.product.2012,seq(0,1,0.2),na.rm=TRUE)
group_by(merged,quantile(merged$Gross.domestic.product.2012,seq(0,1,0.2),na.rm=TRUE))
?ddply
??ddply
?tapply
split(merged$Gross.domestic.product.2012,quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,0.2))
)
split(merged$Gross.domestic.product.2012,quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,0.2), na.rm=TRUE))
cut(merged$Gross.domestic.product.2012, quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,legth = 6)))
cut(merged$Gross.domestic.product.2012, quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,legth = 6),na.rm=TRUE))
cut(merged$Gross.domestic.product.2012, quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,length = 6),na.rm=TRUE))
mutate(merged,quantile = ntile(Gross.domestic.product.2012,5))
merged_test <- mutate(merged,quantile = ntile(Gross.domestic.product.2012,5))
merged_test$quantile
merged_test <- mutate(merged,quantile = ntile(Gross.domestic.product.2012,5,na.rm=TRUE))
merged_test <- mutate(merged,quantile = ntile(Gross.domestic.product.2012,5))
merged_test
table(merged_test$quantile,merged_test$Income.Group)
table(merged_test$quantile,merged_test$Income.Group)
quantile(merged$Gross.domestic.product.2012,seq(0,1,length=6),na.rm=TRUE)
merged
merged <- merged[~is.na(merged$Gross.domestic.product.2012),]
merged <- merged[~is.na(merged$Gross.domestic.product.2012),]
names(merged)
merged <- merged[~is.na(merged$Gross.domestic.product.2012),]
merged$Gross.domestic.product.2012
merged <- merged[~is.na(merged$Gross.domestic.product.2012)]
merged <- merged[!is.na(merged$Gross.domestic.product.2012),]
merged$Gross.domestic.product.2012
cut(merged$Gross.domestic.product.2012, quantile(merged$Gross.domestic.product.2012,prob = seq(0,1,length = 6)))
merged_q <- mutate(merged,quantile = quantile(Gross.domestic.product.2012,prob=seq(0,1,length=6)))
merged_q <- mutate(merged,quantile = quantile(,erged$Gross.domestic.product.2012,prob=seq(0,1,length=6)))
merged_q <- mutate(merged,quantile = quantile(merged$Gross.domestic.product.2012,prob=seq(0,1,length=6)))
mutate(merged,quantile = quantile(Gross.domestic.product.2012,prob=seq(0,1,length=6)))
merged_q <- mutate(merged,quantile =cut(Gross.domestic.product.2012,quantile(Gross.domestic.product.2012,prob=seq(0,1,length=6))))
mergd_q
merged_q
merged_q$quantile
table(merged_q$quantile,merged_q$Income.Group)
tapply(merged$Gross.domestic.product.2012,merged$Income.Group,quantile)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 22, minutes = 30)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrival)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(file,destfile = "q1.csv", method="curl")
q1_data <- read.csv("q1.csv")
names(q1_data)
strsplit("w12")
?strsplit
strsplit(names(q1_data),"wgtp")
strsplit(names(q1_data),"wgtp")[123]
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(file, destfile = "q2.csv", method="curl")
GDP <- read.csv("q2.csv")
names(GDP)
GDP
GDP$X.3
GDP$X.3[2]
GDP$X.3[3]
GDP$X.3[4]
GDP$X.3[5]
class(GDP$X.3)
GDP$X.3[5:]
GDP$X.3[5:*]
GDP$X.3[5:.]
strsplit(GDP$X.3,",")
strsplit("a.b.c",".")
strsplit("a.b.c","\.")
strsplit("a.b.c","\\.")
as.character(GDP$X.3)
as.character(GDP$X.3)[5:235]
strsplit(as.character(GDP$X.3)[5:235],",")
paste(strsplit(as.character(GDP$X.3)[5:235],","))
strsplit(as.character(GDP$X.3)[5:235],",")
splitted <- strsplit(as.character(GDP$X.3)[5:235],",")
splitted
paste(splitted)
splitted
paste(splitted[171])
sub(",","",as.character(GDP$X.3))
gsub(",","",as.character(GDP$X.3))
gsub(",","",as.character(GDP$X.3))[5:235]
as.numeric(gsub(",","",as.character(GDP$X.3))[5:235])
mean(as.numeric(gsub(",","",as.character(GDP$X.3))[5:235]),na.rm=TRUE)
?mean
mean(as.numeric(gsub(",","",as.character(GDP$X.3))[5:235]),na.rm=TRUE)
GDP
str(GDP)
tbl_df(GDP)
as.numeric(gsub(",","",as.character(GDP$X.3))[5:235])
d<-as.numeric(gsub(",","",as.character(GDP$X.3))[5:235])
d
table(is.na(d))
GDP
tail(GDP)
GDP$X.3
GDP[235,]
GDP[234,]
GDP[233,]
GDP[232,]
GDP[220,]
d
GDP[220,]
GDP
GDP$X.3
GDP$X.3[220]
as.numeric(GDP$X.3[220])
d
GDP
GDP[100:200]
GDP[100:200,]
GDP[200:300,]
d<-as.numeric(gsub(",","",as.character(GDP$X.3))[5:219])
d
mean(d,na.rm=TRUE)
names(GDP)
names(GDP)$X.2
GDP$X.2
grep("^United",GDP$X.2)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(file, destfile = "edu.csv", method = "curl")
edu <- read.csv("edu.csv")
merge(edu,GDP,by.x=CountryCode,by.y=X)
merge(edu,GDP,by.x=edu$CountryCode,by.y=GDP$X)
merge(edu,GDP,by.x="CountryCode",by.y="X")
merged <- merge(edu,GDP,by.x="CountryCode",by.y="X")
names(merged)
merged$CountryCode
names(merged)
GDP
edu
merged <- tbl_df(merged)
merged
names(merged)
merged$Special.Notes
grep("^Fiscal yera edn: June",merged$Special.Notes)
grep("^Fiscal yera edn: June",merged$Special.Notes)
grep("^Fiscal yera edn: June",as.character(merged$Special.Notes))
grep("^Fiscal yera end: June",as.character(merged$Special.Notes))
grep("^Fiscal year end: June",as.character(merged$Special.Notes))
length(grep("^Fiscal year end: June",as.character(merged$Special.Notes)))
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
?getSymbols
amzn = getSymbols("AMZN",src="google",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
library(lubridate)
length(grep("^2012",sampleTimes))
ymd(sampleTimes)
wday(sampleTimes)
wday(sampleTimes,label=True)
wday(sampleTimes,label=TRUE)
table(wday(sampleTimes,label=TRUE)=="Mon")
table(as.character(wday(sampleTimes,label=TRUE))=="Mon")
sampleTimes
as.Date(sampleTimes)
ymd(sampleTimes, label=TRUE)
ymd(sampleTimes)
?ymd
2012_only <- sampleTimes[grep("^2012",sampleTimes)]
f <- sampleTimes[grep("^2012",sampleTimes)]
f
table(wday(f)=="Mon")
table(wday(f)=="Mon")
wday(f)
table(wday(f,label=TRUE)=="Mon")
TRUE
as.numeric(TRUE)
as.numeric(FALSE)
mtcars
dcast(mtcars, cyl ~ mpg + hp)
librry(plyr)
library(plyr)
install.packages("plyr")
library(plyr)
dcast(mtcars, cyl ~ mpg + hp)
?dcast
??dcast
library(reshape2)
install.packages("reshape2")
library(reshape2)
dcast(mtcars, cyl ~ mpg + hp)
meltcars <- melt(mtcars,id=c("cyl"),measure.vars = c("mpg","hp"))
meltcars
dcast(mtcars, cyl ~ variable)
dcast(meltcars, cyl ~ variable)
dcast(meltcars, cyl ~ variable,mean)
setwd("UCI HAR Dataset/")
getwd()
f <- read.table("train/X_train.txt")
dim(fg)
dim(f)
s <- read.table("train/subject_train.txt")
dim(s)
?cbind
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rowns
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
sat
s <- sat %>%
select(-contains("total")) %<%
gather(part_sex, count, -score_range) %>%
s
s <- sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex")) %>%
print
s2 <- group_by(s,part,sex)
s2
s3 <- mutate(s2,total = sum(count))
s3
tail(s3)
s2
s
s4 <- mutate(s, total = sum(count), prop = count / total)
s4
